#!/usr/bin/env python3
"""
Viki Chatbot - An Interactive AIML-based Chatbot with Learning Capabilities

Features:
- Session management with unique session IDs
- Botmaster support for teaching new responses
- AIML brain integration with existing knowledge base
- Learning mode for persistent Q&A storage
- User-friendly CLI with session switching

Requirements: python-aiml package
Install with: pip install python-aiml

Author: Brain-of-Viki Project
License: MIT
"""

import aiml
import os
import sys
import glob
import uuid
import json
import time
from datetime import datetime
from pathlib import Path


class VikiChatBot:
    """Enhanced AIML chatbot with session management and learning capabilities."""
    
    def __init__(self, brain_path=".", learned_file="learned.aiml"):
        """Initialize the chatbot with AIML brain files."""
        self.brain_path = Path(brain_path)
        self.learned_file = self.brain_path / learned_file
        self.sessions = {}
        self.current_session = None
        self.botmaster = None
        self.kernel = aiml.Kernel()
        
        # Initialize learned responses file if it doesn't exist
        self.init_learned_file()
        
        # Load AIML brain
        self.load_brain()
        
        print("🧠 Viki's Brain initialized successfully!")
        print(f"📚 Loaded {len(glob.glob(str(self.brain_path / '*.aiml')))} AIML files")
    
    def init_learned_file(self):
        """Initialize the learned.aiml file if it doesn't exist."""
        if not self.learned_file.exists():
            learned_content = '''<?xml version="1.0" encoding="UTF-8"?>
<aiml version="1.0">
<!-- -->
<!-- Learned responses for Viki - Auto-generated by learning mode -->
<!-- This file stores new knowledge taught by the botmaster -->
<!-- -->

</aiml>'''
            with open(self.learned_file, 'w', encoding='utf-8') as f:
                f.write(learned_content)
            print(f"📝 Created new learned responses file: {self.learned_file}")
    
    def load_brain(self):
        """Load all AIML files into the kernel."""
        print("🔄 Loading AIML brain files...")
        
        # Load all AIML files in the brain directory
        aiml_files = glob.glob(str(self.brain_path / "*.aiml"))
        
        if not aiml_files:
            print("❌ No AIML files found! Please ensure AIML files are in the current directory.")
            sys.exit(1)
        
        # Load each AIML file
        for aiml_file in aiml_files:
            try:
                self.kernel.learn(aiml_file)
                print(f"✅ Loaded: {os.path.basename(aiml_file)}")
            except Exception as e:
                print(f"⚠️  Warning: Could not load {os.path.basename(aiml_file)}: {e}")
        
        # Set bot properties
        self.kernel.setBotPredicate("name", "Viki")
        self.kernel.setBotPredicate("age", "Enhanced")
        self.kernel.setBotPredicate("location", "Digital Brain")
        
        print("✅ AIML brain loaded successfully!")
    
    def create_session(self, username):
        """Create a new chat session for a user."""
        session_id = str(uuid.uuid4())[:8]
        self.sessions[session_id] = {
            'username': username,
            'created': datetime.now(),
            'messages': 0,
            'learned_responses': 0
        }
        print(f"🆕 Created new session {session_id} for {username}")
        return session_id
    
    def set_current_session(self, session_id):
        """Set the current active session."""
        if session_id in self.sessions:
            self.current_session = session_id
            username = self.sessions[session_id]['username']
            is_botmaster = username == self.botmaster
            status = "👑 BOTMASTER" if is_botmaster else "👤 USER"
            print(f"🔄 Switched to session {session_id} ({username}) - {status}")
            return True
        else:
            print(f"❌ Session {session_id} not found!")
            return False
    
    def set_botmaster(self, username):
        """Set the botmaster (admin user)."""
        self.botmaster = username
        print(f"👑 Botmaster set to: {username}")
    
    def is_botmaster(self):
        """Check if current user is the botmaster."""
        if not self.current_session:
            return False
        current_user = self.sessions[self.current_session]['username']
        return current_user == self.botmaster
    
    def get_response(self, message):
        """Get response from AIML kernel."""
        self.sessions[self.current_session]['messages'] += 1
        return self.kernel.respond(message)
    
    def teach_response(self, pattern, response):
        """Teach the bot a new response (botmaster only)."""
        if not self.is_botmaster():
            return "❌ Only the botmaster can teach new responses!"
        
        try:
            # Create AIML category
            category_xml = f'''
<category>
<pattern>{pattern.upper()}</pattern>
<template>{response}</template>
</category>'''
            
            # Read current learned file
            with open(self.learned_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Insert new category before closing </aiml> tag
            if '</aiml>' in content:
                content = content.replace('</aiml>', f"{category_xml}\n\n</aiml>")
            else:
                content += f"{category_xml}\n"
            
            # Write back to file
            with open(self.learned_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            # Reload the learned file into kernel
            self.kernel.learn(str(self.learned_file))
            
            # Update session stats
            self.sessions[self.current_session]['learned_responses'] += 1
            
            print(f"✅ Learned new response: '{pattern}' -> '{response}'")
            return f"✨ Great! I've learned that '{pattern}' should be answered with '{response}'"
            
        except Exception as e:
            print(f"❌ Error teaching response: {e}")
            return f"❌ Sorry, I couldn't learn that response: {e}"
    
    def show_sessions(self):
        """Display all active sessions."""
        if not self.sessions:
            print("📭 No active sessions")
            return
        
        print("\n📋 Active Sessions:")
        print("-" * 60)
        for session_id, info in self.sessions.items():
            username = info['username']
            messages = info['messages']
            learned = info['learned_responses']
            created = info['created'].strftime("%H:%M:%S")
            is_current = "🔸" if session_id == self.current_session else "  "
            is_botmaster = "👑" if username == self.botmaster else "👤"
            
            print(f"{is_current} {session_id} | {is_botmaster} {username:15} | {messages:3} msgs | {learned:2} learned | {created}")
        print("-" * 60)
    
    def show_help(self):
        """Display help information."""
        print("""
🤖 Viki Chatbot Commands:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📝 Chat Commands:
  • Just type your message to chat with Viki
  • Type '/quit' or '/exit' to end the session

🔧 Session Management:
  • /switch <username>     - Switch to user's session (create if new)
  • /sessions             - Show all active sessions
  • /whoami              - Show current session info

👑 Botmaster Commands (Admin only):
  • /botmaster <username> - Set botmaster privileges
  • /teach               - Enter teaching mode for new responses
  
📚 Other Commands:
  • /help               - Show this help message
  • /stats              - Show bot statistics

💡 Tips:
  • Botmaster can teach Viki new responses when she doesn't know something
  • Each user has their own session with message history
  • Learned responses are saved permanently in learned.aiml

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
""")
    
    def show_stats(self):
        """Show bot statistics."""
        total_messages = sum(session['messages'] for session in self.sessions.values())
        total_learned = sum(session['learned_responses'] for session in self.sessions.values())
        
        print(f"""
📊 Viki Bot Statistics:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
👥 Active sessions: {len(self.sessions)}
💬 Total messages: {total_messages}
📚 Learned responses: {total_learned}
👑 Botmaster: {self.botmaster or 'Not set'}
🧠 AIML files loaded: {len(glob.glob(str(self.brain_path / '*.aiml')))}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
""")
    
    def teaching_mode(self):
        """Interactive teaching mode for the botmaster."""
        if not self.is_botmaster():
            print("❌ Only the botmaster can use teaching mode!")
            return
        
        print("""
🎓 Teaching Mode Activated!
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

You can now teach Viki new responses. Format:
1. Enter the pattern (what users might ask)
2. Enter the response (what Viki should answer)

Tips:
• Patterns should be simple and general (e.g., "WHAT IS PYTHON")
• Use * for wildcards (e.g., "MY NAME IS *")
• Type 'done' to exit teaching mode

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
""")
        
        while True:
            print("\n📝 Teaching new response...")
            pattern = input("Pattern (what users ask): ").strip()
            
            if pattern.lower() in ['done', 'exit', 'quit']:
                print("✅ Exited teaching mode")
                break
            
            if not pattern:
                continue
            
            response = input("Response (what Viki answers): ").strip()
            
            if not response:
                continue
            
            result = self.teach_response(pattern, response)
            print(result)
    
    def run(self):
        """Main chatbot loop."""
        print("""
🧠✨ Welcome to Viki's Enhanced Brain Chatbot! ✨🧠

Enhanced with modern AI knowledge, emotional intelligence, and creativity!
Type '/help' for commands or just start chatting!
""")
        
        # Initial setup
        username = input("👤 Enter your username: ").strip()
        if not username:
            username = "Guest"
        
        # Create initial session
        session_id = self.create_session(username)
        self.set_current_session(session_id)
        
        # Ask if user wants to be botmaster
        if not self.botmaster:
            is_botmaster = input("👑 Are you the botmaster? (y/N): ").strip().lower()
            if is_botmaster in ['y', 'yes']:
                self.set_botmaster(username)
        
        print(f"\n💬 Chat started! Current user: {username}")
        if self.is_botmaster():
            print("👑 You have botmaster privileges - you can teach Viki new responses!")
        
        # Main chat loop
        while True:
            try:
                # Show current session in prompt
                current_user = self.sessions[self.current_session]['username']
                crown = "👑" if self.is_botmaster() else "👤"
                
                user_input = input(f"\n{crown} {current_user}: ").strip()
                
                if not user_input:
                    continue
                
                # Handle commands
                if user_input.startswith('/'):
                    command = user_input[1:].lower().split()
                    
                    if command[0] in ['quit', 'exit']:
                        print("👋 Goodbye! Thanks for chatting with Viki!")
                        break
                    
                    elif command[0] == 'help':
                        self.show_help()
                    
                    elif command[0] == 'sessions':
                        self.show_sessions()
                    
                    elif command[0] == 'stats':
                        self.show_stats()
                    
                    elif command[0] == 'whoami':
                        user = self.sessions[self.current_session]['username']
                        status = "👑 BOTMASTER" if self.is_botmaster() else "👤 USER"
                        print(f"🔍 Session: {self.current_session} | User: {user} | Status: {status}")
                    
                    elif command[0] == 'switch' and len(command) > 1:
                        new_username = ' '.join(command[1:])
                        # Find existing session or create new one
                        existing_session = None
                        for sid, info in self.sessions.items():
                            if info['username'] == new_username:
                                existing_session = sid
                                break
                        
                        if existing_session:
                            self.set_current_session(existing_session)
                        else:
                            new_session = self.create_session(new_username)
                            self.set_current_session(new_session)
                    
                    elif command[0] == 'botmaster' and len(command) > 1:
                        if self.is_botmaster() or not self.botmaster:
                            new_botmaster = ' '.join(command[1:])
                            self.set_botmaster(new_botmaster)
                        else:
                            print("❌ Only the current botmaster can change botmaster privileges!")
                    
                    elif command[0] == 'teach':
                        self.teaching_mode()
                    
                    else:
                        print(f"❓ Unknown command: {command[0]}. Type '/help' for available commands.")
                    
                    continue
                
                # Get AI response
                response = self.get_response(user_input)
                
                if not response or response.strip() == "":
                    response = "I don't know how to respond to that."
                    
                    # Offer learning opportunity to botmaster
                    if self.is_botmaster():
                        print(f"🤖 Viki: {response}")
                        learn = input("👑 Would you like to teach me a response? (y/N): ").strip().lower()
                        if learn in ['y', 'yes']:
                            new_response = input("👑 What should I respond? ").strip()
                            if new_response:
                                self.teach_response(user_input, new_response)
                                response = new_response
                    else:
                        print(f"🤖 Viki: {response}")
                        print("💡 Ask the botmaster to teach me a response to this!")
                        continue
                
                print(f"🤖 Viki: {response}")
                
            except KeyboardInterrupt:
                print("\n👋 Goodbye! Thanks for chatting with Viki!")
                break
            except Exception as e:
                print(f"❌ Error: {e}")
                continue


def main():
    """Main entry point."""
    try:
        # Check if python-aiml is installed
        import aiml
    except ImportError:
        print("""
❌ Error: python-aiml package not found!

Please install it with:
    pip install python-aiml

Or if you're using conda:
    conda install -c conda-forge python-aiml
""")
        sys.exit(1)
    
    # Check if AIML files exist
    if not glob.glob("*.aiml"):
        print("""
❌ Error: No AIML files found in current directory!

Please ensure you're running this script from the Brain-of-Viki directory
that contains the AIML brain files.
""")
        sys.exit(1)
    
    # Initialize and run the chatbot
    try:
        bot = VikiChatBot()
        bot.run()
    except Exception as e:
        print(f"❌ Fatal error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()